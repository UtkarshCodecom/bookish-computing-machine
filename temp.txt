To improve the structure and maintainability of the code, we can break it down into several smaller files, each responsible for a specific part of the applicati



















                                                                                                                                                               ion. Here's a suggested structure:

```
src/
│
├── components/
│   ├── NoteEditor/
│   │   ├── NoteEditor.js
│   │   ├── Canvas.js
│   │   ├── FloatingMenu.js
│   │   ├── TextEditor.js
│   │   └── Header.js
│   └── common/
│       ├── TransformerWrapper.js
│       └── LineComponent.js
│
├── hooks/
│   ├── useDrawing.js
│   ├── useTextEditing.js
│   └── useHistory.js
│
├── utils/
│   ├── constants.js
│   └── helpers.js
│
└── styles/
    └── NoteEditor.css
```

### File Descriptions

1. **NoteEditor.js**: The main component that orchestrates the entire note editing functionality.
2. **Canvas.js**: Handles the rendering of the `Stage` and `Layer` components from `react-konva`, including lines and text elements.
3. **FloatingMenu.js**: Manages the floating menu UI for selecting tools and settings.
4. **TextEditor.js**: Handles inline text editing functionality.
5. **Header.js**: Contains the header UI with app title and navigation buttons.
6. **TransformerWrapper.js**: A wrapper component for the `Transformer` to handle selection and resizing of text elements.
7. **LineComponent.js**: A component for rendering individual lines on the canvas.
8. **useDrawing.js**: A custom hook to manage drawing state and logic.
9. **useTextEditing.js**: A custom hook to manage text editing state and logic.
10. **useHistory.js**: A custom hook to manage undo/redo history.
11. **constants.js**: Contains constant values like colors, brush sizes, etc.
12. **helpers.js**: Utility functions for calculations and transformations.
13. **NoteEditor.css**: Styles for the NoteEditor component.

### Code for Each File

#### NoteEditor.js

```jsx
import React from 'react';
import Header from './Header';
import Canvas from './Canvas';
import FloatingMenu from './FloatingMenu';
import './NoteEditor.css';

const NoteEditor = () => {
  return (
    <main className="note-studio-main">
      <Header />
      <FloatingMenu />
      <Canvas />
    </main>
  );
};

export default NoteEditor;
```

#### Canvas.js

```jsx
import React, { useRef } from 'react';
import { Stage, Layer } from 'react-konva';
import LineComponent from '../common/LineComponent';
import TransformerWrapper from '../common/TransformerWrapper';
import useDrawing from '../../hooks/useDrawing';
import useTextEditing from '../../hooks/useTextEditing';

const Canvas = () => {
  const stageRef = useRef();
  const { lines, currentLine, handlePointerDown, handlePointerMove, handlePointerUp } = useDrawing(stageRef);
  const { textElements, handleStageClick } = useTextEditing(stageRef);

  return (
    <section className="canvas-container">
      <Stage
        ref={stageRef}
        width={window.innerWidth}
        height={window.innerHeight - 65}
        onPointerDown={handlePointerDown}
        onPointerMove={handlePointerMove}
        onPointerUp={handlePointerUp}
        onClick={handleStageClick}
      >
        <Layer>
          {lines.map((line, i) => (
            <LineComponent key={i} line={line} />
          ))}
          {currentLine && <LineComponent line={currentLine} />}
          {textElements.map((textEl) => (
            <TransformerWrapper key={textEl.id} textEl={textEl} />
          ))}
        </Layer>
      </Stage>
    </section>
  );
};

export default Canvas;
```

#### FloatingMenu.js

```jsx
import React from 'react';

const FloatingMenu = () => {
  // Logic for handling menu interactions
  return (
    <div className="floating-menu">
      {/* Menu UI */}
    </div>
  );
};

export default FloatingMenu;
```

#### TextEditor.js

```jsx
import React, { useRef } from 'react';
import useTextEditing from '../../hooks/useTextEditing';

const TextEditor = () => {
  const textInputRef = useRef();
  const { isEditingText, textInputValue, handleTextInputChange, handleTextInputKeyDown, finishTextEditing } = useTextEditing(textInputRef);

  return (
    isEditingText && (
      <input
        ref={textInputRef}
        type="text"
        value={textInputValue}
        onChange={handleTextInputChange}
        onKeyDown={handleTextInputKeyDown}
        onBlur={finishTextEditing}
        style={{
          position: 'fixed',
          // Additional styles
        }}
      />
    )
  );
};

export default TextEditor;
```

#### Header.js

```jsx
import React from 'react';

const Header = () => {
  // Logic for header interactions
  return (
    <header className="note-studio-header">
      <div className="header-left">
        <h1 className="app-title">✨ Note Studio</h1>
        {/* Mode and Zoom badges */}
      </div>
      <nav className="header-nav">
        {/* Navigation buttons */}
      </nav>
    </header>
  );
};

export default Header;
```

#### TransformerWrapper.js

```jsx
import React from 'react';
import { Transformer, Text } from 'react-konva';

const TransformerWrapper = ({ textEl }) => {
  return (
    <React.Fragment>
      <Text
        text={textEl.text}
        // Additional props
      />
      <Transformer
        // Transformer props
      />
    </React.Fragment>
  );
};

export default TransformerWrapper;
```

#### LineComponent.js

```jsx
import React from 'react';
import { Line } from 'react-konva';

const LineComponent = ({ line }) => {
  return (
    <Line
      points={line.points}
      stroke={line.color}
      strokeWidth={line.size}
      // Additional props
    />
  );
};

export default LineComponent;
```

#### useDrawing.js

```jsx
import { useState } from 'react';

const useDrawing = (stageRef) => {
  const [lines, setLines] = useState([]);
  const [currentLine, setCurrentLine] = useState(null);

  const handlePointerDown = (e) => {
    // Logic for pointer down
  };

  const handlePointerMove = (e) => {
    // Logic for pointer move
  };

  const handlePointerUp = (e) => {
    // Logic for pointer up
  };

  return {
    lines,
    currentLine,
    handlePointerDown,
    handlePointerMove,
    handlePointerUp,
  };
};

export default useDrawing;
```

#### useTextEditing.js

```jsx
import { useState } from 'react';

const useTextEditing = (stageRef) => {
  const [textElements, setTextElements] = useState([]);
  const [isEditingText, setIsEditingText] = useState(false);
  const [textInputValue, setTextInputValue] = useState('');

  const handleStageClick = (e) => {
    // Logic for stage click
  };

  const handleTextInputChange = (e) => {
    setTextInputValue(e.target.value);
  };

  const handleTextInputKeyDown = (e) => {
    // Logic for text input key down
  };

  const finishTextEditing = () => {
    // Logic for finishing text editing
  };

  return {
    textElements,
    isEditingText,
    textInputValue,
    handleStageClick,
    handleTextInputChange,
    handleTextInputKeyDown,
    finishTextEditing,
  };
};

export default useTextEditing;
```

#### useHistory.js

```jsx
import { useState } from 'react';

const useHistory = () => {
  const [history, setHistory] = useState([]);
  const [historyIndex, setHistoryIndex] = useState(-1);

  const saveToHistory = (newState) => {
    const newHistory = history.slice(0, historyIndex + 1);
    newHistory.push(newState);
    setHistory(newHistory);
    setHistoryIndex(newHistory.length - 1);
  };

  const undo = () => {
    if (historyIndex > 0) {
      setHistoryIndex(historyIndex - 1);
    }
  };

  return {
    history,
    historyIndex,
    saveToHistory,
    undo,
  };
};

export default useHistory;
```

#### constants.js

```js
export const colors = ['#2563eb', '#ef4444', '#10b981', '#8b5cf6'];
export const brushSizes = [1, 3, 5, 10];
export const brushTypes = [{ type: 'pen', opacity: 1 }, { type: 'marker', opacity: 0.5 }];
export const eraseSizes = [5, 10, 20];
export const fontFamilies = ['Arial', 'Courier', 'Freestyle Script'];
export const fontSizes = [12, 16, 24, 32];
export const highlightColors = ['#ffeb3b', '#c6ff00'];
export const MODES = { DRAW: 'draw', TEXT: 'text', ERASE: 'erase', PAN: 'pan' };
export const ERASE_TYPES = { PARTIAL: 'partial', WHOLE: 'whole' };
```

#### helpers.js

```js
export const getRelativePointerPosition = (stage) => {
  const transform = stage.getAbsoluteTransform().copy();
  transform.invert();
  const pos = stage.getPointerPosition();
  return transform.point(pos);
};

export const isPointNearLine = (point, linePoints, threshold) => {
  for (let i = 0; i < linePoints.length - 2; i += 2) {
    const x1 = linePoints[i];
    const y1 = linePoints[i + 1];
    const x2 = linePoints[i + 2];
    const y2 = linePoints[i + 3];

    const distance = pointToSegmentDistance(
      point,
      { x: x1, y: y1 },
      { x: x2, y: y2 }
    );
    if (distance < threshold) return true;
  }
  return false;
};

export const pointToSegmentDistance = (p, a, b) => {
  const dx = b.x - a.x;
  const dy = b.y - a.y;

  if (dx === 0 && dy === 0) {
    return Math.hypot(p.x - a.x, p.y - a.y);
  }

  const t = ((p.x - a.x) * dx + (p.y - a.y) * dy) / (dx * dx + dy * dy);
  const clampedT = Math.max(0, Math.min(1, t));

  const closestX = a.x + clampedT * dx;
  const closestY = a.y + clampedT * dy;

  return Math.hypot(p.x - closestX, p.y - closestY);
};
```

This structure separates concerns, making the code more modular and easier to maintain. Each component and hook is responsible for a specific part of the application, which simplifies debugging and future enhancements.